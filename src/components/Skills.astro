---
const skillCategories = [
  {
    title: 'FRONTEND',
    skills: ['HTML', 'CSS', 'JavaScript', 'React', 'Astro', 'TypeScript']
  },
  {
    title: 'BACKEND',
    skills: ['Node.js', 'Express', 'MongoDB', 'PostgreSQL', 'REST APIs', 'Git']
  },
  {
    title: 'TOOLS',
    skills: ['VS Code', 'Git', 'npm', 'Figma', 'Chrome DevTools', 'Terminal']
  }
];

const primarySkills = [
  'HTML', 'CSS', 'JavaScript', 'React', 'Node.js', 'Git',
  'TypeScript', 'Astro', 'MongoDB', 'Express', 'REST APIs', 'npm'
];
---

<section id="skills" class="section">
  <div class="container">
    <h2 class="text-huge text-center skills-main-title">SKILLS</h2>
    
    <!-- Primary skills grid -->
    <div class="skills-primary">
      <h3 class="text-big skills-section-title">CORE TECHNOLOGIES</h3>
      <div class="skill-grid">
        {primarySkills.map((skill, index) => (
          <div class="skill-item" style={`animation-delay: ${index * 0.1}s`}>
            <span class="text-small">{skill}</span>
          </div>
        ))}
      </div>
    </div>
    
    <!-- Categorized skills -->
    <div class="skills-categories">
      {skillCategories.map((category, categoryIndex) => (
        <div class="skill-category brutal-card" style={`animation-delay: ${categoryIndex * 0.3}s`}>
          <h4 class="text-big category-title">{category.title}</h4>
          <div class="category-skills">
            {category.skills.map((skill, skillIndex) => (
              <span 
                class="skill-badge" 
                style={`animation-delay: ${(categoryIndex * 0.3) + (skillIndex * 0.1)}s`}
              >
                {skill}
              </span>
            ))}
          </div>
        </div>
      ))}
    </div>
    
    <!-- Skills philosophy -->
    <div class="skills-philosophy">
      <div class="brutal-card philosophy-card -rotate-1">
        <h3 class="text-big philosophy-title">LEARNING APPROACH</h3>
        <p class="text-body philosophy-text">
          I believe in building strong fundamentals before exploring advanced concepts. 
          Each technology I learn becomes a building block for creating better solutions. 
          Always curious, always improving, always ready for the next challenge.
        </p>
      </div>
    </div>
  </div>
</section>

<style>
  /* Consistent text colors */
  .skills-main-title {
    color: rgb(255, 255, 255);
    position: relative;
    z-index: 10;
  }
  
  .skills-section-title {
    color:rgb(255, 255, 255);
    position: relative;
    z-index: 10;
  }
  
  .skills-primary {
    margin-bottom: 3rem;
  }
  
  .skills-primary h3 {
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  .skill-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
  }
  
  .skill-item {
    opacity: 0;
    animation: popIn 0.6s ease forwards;
    background: #fff;
    border: 3px solid #000;
    padding: 1rem;
    text-align: center;
    position: relative;
    z-index: 10;
  }
  
  .skill-item span {
    color: #000;
    font-weight: 700;
    position: relative;
    z-index: 10;
  }
  
  .skills-categories {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
  }
  
  .skill-category {
    opacity: 0;
    animation: slideInUp 0.8s ease forwards;
    position: relative;
    z-index: 10;
  }
  
  .category-title {
    margin-bottom: 1.5rem;
    text-align: center;
    color:rgb(255, 255, 255);
    position: relative;
    z-index: 10;
  }
  
  .category-skills {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
  }
  
  .skill-badge {
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    font-weight: 700;
    text-transform: uppercase;
    padding: 0.5rem 1rem;
    background: #000;
    color: #fff;
    border: 2px solid #000;
    opacity: 0;
    animation: fadeInScale 0.5s ease forwards;
    transition: all 0.2s ease;
    position: relative;
    z-index: 10;
  }
  
  .skill-badge:hover {
    background: #ff6b35;
    color: #000;
    transform: scale(1.1) rotate(2deg);
  }
  
  .skills-philosophy {
    text-align: center;
  }
  
  .philosophy-card {
    background: #ff6b35;
    border: 4px solid #000;
    position: relative;
    z-index: 10;
  }
  
  .philosophy-title {
    color: #000;
    position: relative;
    z-index: 10;
  }
  
  .philosophy-text {
    color: #000;
    position: relative;
    z-index: 10;
  }
  
  @keyframes popIn {
    0% {
      opacity: 0;
      transform: scale(0.5) rotate(180deg);
    }
    70% {
      transform: scale(1.1) rotate(-10deg);
    }
    100% {
      opacity: 1;
      transform: scale(1) rotate(0deg);
    }
  }
  
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(50px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  @media (max-width: 768px) {
    .skills-categories {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Intersection Observer for skill animations
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const items = entry.target.querySelectorAll('.skill-item, .skill-category, .skill-badge');
        items.forEach(item => {
          item.style.animationPlayState = 'running';
        });
      }
    });
  }, {
    threshold: 0.1
  });
  
  // Observe the skills section
  const skillsSection = document.querySelector('#skills');
  if (skillsSection) {
    observer.observe(skillsSection);
  }
  
  // Pause animations initially
  document.querySelectorAll('.skill-item, .skill-category, .skill-badge').forEach(item => {
    item.style.animationPlayState = 'paused';
  });
</script>